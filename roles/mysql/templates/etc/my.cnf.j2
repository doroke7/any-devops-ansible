{% set i =  groups[bra ~ '-mysql'].index(inventory_hostname) %}

[client]
######################### [client] 基本设置 #########################
port = {{ MYSQL.SERVERS[i].PORT }}
user = {{ MYSQL.SERVERS[i].CONNECTIONS[0]['USER'] }}
password = {{ MYSQL.SERVERS[i].CONNECTIONS[0]['PASSWORD'] }}
# default-character-set = {{ MYSQL.CHARACTER_SET }}       # 5.7 会造成 /usr/bin/mysqlbinlog 不作用, 

[mysql]
######################### [mysql] 基本设置 #########################
no-auto-rehash                                            # 仅允许使用键值的updates和deletes

[mysqldump]
######################### [mysqldump] 基本设置 #########################
user = {{ MYSQL.SERVERS[i].CONNECTIONS[0]['USER'] }}
password = {{ MYSQL.SERVERS[i].CONNECTIONS[0]['PASSWORD'] }}
max_allowed_packet = 128M

[isamchk]
######################### [isamchk] 基本设置 #########################
key_buffer = 2048M
sort_buffer_size = 2048M
read_buffer = 32M
write_buffer = 32M

[myisamchk]
######################### [myisamchk] 基本设置 #########################
key_buffer = 2048M
sort_buffer_size = 2048M
read_buffer = 32M
write_buffer = 32M

[mysqlhotcopy]
######################### [mysqlhotcopy] 基本设置 #########################
interactive-timeout

[mysqld_safe]
######################### [mysqld_safe] 基本设置 #########################
open-files-limit = 8192                                   # 增加每个进程的可打开文件数量.打开大量表需要将此值设大
{% if mysql_version == '5.5' or mysql_version == '5.6' %}
[mysqld_safe]
log-error = {{ MYSQL.SERVERS[i].LOGDIR }}/mysqld_safe-error.log
pid-file = /var/run/mysqld/mysqld.pid
{% endif %}

[mysqld]
######################### [mysqld] 基本设置 #########################
server_id = {{ groups[bra ~ '-mysql'].index(inventory_hostname) + 1 }}

port = {{ MYSQL.SERVERS[i].PORT }}
datadir = {{ MYSQL.SERVERS[i].DATADIR }}
socket = {{ MYSQL.SERVERS[i].SOCKET }}
pid-file = /var/run/mysqld/mysqld.pid

{% if (mysql_version == '5.7' or mysql_version == '8.0' or mysql_version == '8.1') and mysql_skip == True %}
ngram_token_size=2
{% endif %}

#SQL MODE 使用的话很多外包代码 没办法使用
#sql_mode='ONLY_FULL_GROUP_BY,NO_AUTO_VALUE_ON_ZERO,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,PIPES_AS_CONCAT,ANSI_QUOTES'

{# 先 and 后 or #}
{% if (mysql_version == '5.6' or mysql_version == '5.7' or mysql_version == '8.0' or mysql_version == '8.1') and mysql_skip == True %}
# mysql 5.7 以後版本, 預設有安全密碼
skip-grant-tables = 1
skip-networking = 1
{% endif %}

init-connect='SET NAMES {{ MYSQL.CHARACTER_SET }}'
skip-character-set-client-handshake                      # 此处是忽略客户端的字符集，使用服务器的设置
skip-external-locking
slave-parallel-workers=6

# external-locking = FALSE                               # 5.7 不作用, 避免外部锁定(减少出错几率，增加稳定性)
# skip-name-resolv                                       # 5.7 不作用, 禁止外部连接进行DNS解析
transaction_isolation = {{ MYSQL.TRANSACTION_ISOLATION }}  # 事务隔离级别

character-set-server = {{ MYSQL.CHARACTER_SET }}
collation-server = {{ MYSQL.COLLATION }}                 # 设置校对规则
symbolic-links = 0                                       # Disabling symbolic-links is recommended to prevent assorted security risks

{% if  mysql_version == '5.6' or mysql_version == '5.7' %}
lower_case_table_names = 1                               # 8.0 不作用
{% endif %}

# Recommended in standard MySQL setup
#sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES

{% if mysql_version == '5.7' and mysql_skip == False %}
# 使用 skip-grant-tables = 1, skip-networking = 1 时，validate-password 不可同时使用
validate-password = 0
{% elif (mysql_version == '8.0' or mysql_version == '8.1') and mysql_skip == False %}
validate_password.dictionary_file = /usr/share/dict/words
validate_password.length = 4
validate_password.policy = 0
validate_password.number_count = 1
{% endif %}

############################# [mysqld] 效能 - 一般容量相关 #############################
open_files_limit = 1024                                 # 打开文件的最大个数，如果出现too mantopen files之类的就需要调整该值了
max_allowed_packet = 128M                               # 服务器一次能处理的最大的查询包的值
# table_cache = 614                                     # 5.7 不作用, 表分配的内存，物理内存越大，设置就越大
table_open_cache = 512                                  # 设置高速缓存表的数目
thread_cache_size = 64                                  # 服务器线程缓存数，与内存大小有关(建议大于3G设置为64)
# thread_concurrency = 32                               # 5.7 不作用, CPU核数的两倍
# query_cache_size = 32M                                # 8.0 不作用 指定MySQL查询缓冲区的大小
# query_cache_limit = 2M                                # 8.0 不作用 只有小于此设置值的结果才会被缓存
# query_cache_min_res_unit = 2k                         # 8.0 不作用 设置查询缓存分配内存的最小单位
key_buffer_size = 512M                                  # 指定用于索引的缓冲区大小，增加它可得到更好的索引处理性能
sort_buffer_size = 2M                                   # 设置查询排序时所能使用的缓冲区大小，系统默认大小为2MB
join_buffer_size = 1M                                   # 联合查询操作所能使用的缓冲区大小
read_buffer_size = 4M                                   # 读查询操作所能使用的缓冲区大小
read_rnd_buffer_size = 16M                              # 设置进行随机读的时候所使用的缓冲区
thread_stack = 192K                                     # 设置Mysql每个线程的堆栈大小，默认值足够大，可满足普通操作
bulk_insert_buffer_size = 8M                            # 可以适当调整参数至16MB~32MB，建议8MB
tmp_table_size = 64M                                    # 设置内存临时表最大值
max_heap_table_size = 64M                               # 独立的内存表所允许的最大容量
big_tables = ON
############################# [mysqld] 效能 - MyISAM 相关 #############################
myisam_sort_buffer_size = 128M
myisam_max_sort_file_size = 10G
myisam_repair_threads = 1
# myisam_recover                                        # 5.7 不作用,自动检查和修复没有适当关闭的MyISAM表

############################# [mysqld] 效能 - InnoDB 相关 #############################
innodb_old_blocks_time =1000                            # 减小单次的大批量数据查询,默认为0，调整后性能提升80%      
innodb_flush_method = O_DIRECT                          # 从innode刷新到磁盘，不经过系统write,fdatasync(默认)，O_DSYNC，O_DIRECT http://blog.csdn.net/jiao_fuyou/article/details/16113403 
# innodb_additional_mem_pool_size = 16M                 # 5.7 不作用, 设置InnoDB存储的数据目录信息和其他内部数据结构的内存池大小
# innodb_buffer_pool_size = 51G                         # 5.7 不作用, InnoDB使用一个缓冲池来保存索引和原始数据，官方建议物理内存的80%
# innodb_data_file_path = ibdata1:128M:autoextend       # 5.7 不作用, 表空间
# innodb_file_io_threads = 4                            #  5.7 不作用, InnoDB中的文件I/O线程，通常设置为4，innodb除master线程外，还有insert buffer, log, read, write这4种线程，默认各有一个
innodb_open_files = 500                                 # 限制Innodb能打开的表的数据，如果库里的表特别多的情况，请增加这个。这个值默认是300  
innodb_read_io_threads = 8
innodb_write_io_threads = 8
innodb_thread_concurrency = 8                           # 服务器有几个CPU就设置为几，建议用默认设置，一般设为8
innodb_purge_threads = 1                                # 独线程,默认情况下参数设置为0(不使用单独线程),设置为 1 时表示使用单独的清除线程。
innodb_flush_log_at_trx_commit = 2                      # 设置为0就等于innodb_log_buffer_size队列满后再统一存储，默认为1
innodb_log_buffer_size = 16M                            # 默认为1MB，通常设置为6-8MB就足够
innodb_log_file_size = 512M                             # 确定日志文件的大小，更大的设置可以提高性能，但也会增加恢复数据库的时间
innodb_log_files_in_group = 3                           # 为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3
innodb_max_dirty_pages_pct = 90                         # InnoDB主线程刷新缓存池中的数据
innodb_lock_wait_timeout = 120                          # InnoDB事务被回滚之前可以等待一个锁定的超时秒数
innodb_file_per_table = 1                               # InnoDB为独立表空间模式，每个数据库的每个表都会生成一个数据空间,便於 xtrabackup 备份
innodb_autoextend_increment = 256                       # 这个参数的作用是控制innodb 共享表空间文件自动扩展的大小
innodb_flush_log_at_trx_commit = 0
innodb_io_capacity             = 2000
binlog_error_action = ABORT_SERVER


{% if  mysql_version == '5.6' or mysql_version == '5.7' %}
innodb_file_format=Barracuda                            # 8.0 不作用 
{% endif %}

# innodb_support_xa=0                                   # 8.0 不作用 
innodb_buffer_pool_dump_at_shutdown = 1
innodb_buffer_pool_load_at_startup = 1

{% if mysql_version == '5.7' or mysql_version == '8.0' or mysql_version == '8.1' %}
# innodb_undo_tablespaces=4                             # 5.7 不作用
innodb_purge_rseg_truncate_frequency=512
innodb_max_undo_log_size=2G
innodb_undo_log_truncate=1
{% endif %}
{% if mysql_version == '5.7' %}
innodb_undo_logs=2048                                   # 8.0 不作用
{% endif %}

############################# [mysqld] 效能 - 连接相关 #############################
bind-address = {{ MYSQL.SERVERS[i].BIND_ADDRESS }}
connect_timeout = 60
wait_timeout = 28800
max_connections = 1000
max_connect_errors = 1000
back_log = 1000                                         # 指出在MySQL暂时停止响应新请求之前，短时间内的多少个请求
wait_timeout = 360                                      # 指定一个请求的最大连接时间
interactive_timeout = 360                               # 连接保持活动的时间
{% if mysql_version == '5.7' or mysql_version == '8.0' %}
skip_symbolic_links = yes                               # 禁止使用 软 链接 存储 mysql 数据 档案
{% endif %}
local-infile=1                           
######################### [mysqld] Log 相关 #########################
log_output = FILE                                       # log 写入 file , 效能较好

######################### [mysqld] General Log 相关 #########################
{% if groups[bra ~ '-mysql'].index(inventory_hostname) + 1 == 1 %}
general_log = on                                        # 记录所有 DDL, DML, DCL, 语句
general_log_file = {{ MYSQL.SERVERS[i].LOGDIR }}/mysql-general.log
{% endif %}

######################### [mysqld] Error log 相关 #########################catc
{% if mysql_version == '5.7' or mysql_version == '8.0' or mysql_version == '8.1' %}
log-error = {{ MYSQL.SERVERS[i].LOGDIR }}/mysql-error.log
{% endif %}

######################### [mysqld] Slow log 相关 #########################catc
slow_query_log = on                                     # 开启慢查询
log-queries-not-using-indexes                           # 记录所有没有使用到索引的查询语句
long_query_time = 1                                     # 指定多少秒未返回结果的查询属于慢查询
min_examined_row_limit = 5                              # 记录那些由于查找了多余5次而引发的慢查询
log-slow-admin-statements                               # 记录那些慢的OPTIMIZE TABLE,ANALYZE TABLE和ALTER TABLE语句
log-slow-slave-statements                               # 记录由slave所产生的慢查询
slow_query_log_file = {{ MYSQL.SERVERS[i].LOGDIR }}/mysql-slow.log       # 指定慢查询日志文件路径

############################ [mysqld] Relay log 相关 ############################
{% if groups[bra ~ '-mysql'].index(inventory_hostname) + 1 >= 2 %}
relay-log = {{ MYSQL.SERVERS[i].LOGDIR }}/mysql-relay                                 # relay 目录
relay-log-info-file = {{ MYSQL.SERVERS[i].LOGDIR }}/mysql-relay.info                  # info 目录
slave-skip-errors = 1007,1008,1032,1062                 # 跳过主从复制时的错误
read-only = 1                                           # GRANT 含 SUPER 的 才可以 改寫 db 
#master-connect-retry = 30                              # 5.7 不作用, 主从复制丢失，重连间隔时间，默认60s
{% endif %}
{% if mysql_ha == 'mha' %}
relay_log_purge = 0                                     # MHA 需要 relay-log ， 请不要自动清除
{% else %}
relay_log_purge = 1                                     # MHA 需要 relay-log ， 请不要自动清除
{% endif %}
######################### [mysqld] Bin log 相关 - GTID MODE #########################
{% if (mysql_version == '5.7' or mysql_version == '8.0') and (MYSQL.GTID_MODE == 'yes' or MYSQL.GTID_MODE == 1 or MYSQL.GTID_MODE == true )%}
gtid_executed_compression_period = 1000                      
gtid_mode = on            
enforce_gtid_consistency = on
###########################

# log_bin=binlog
# log_slave_updates=ON

 
{% endif %}

############################ [mysqld] Bin log 相关 - 其他 ############################
log-bin = {{ MYSQL.SERVERS[i].LOGDIR }}/mysql-bin                          # 开启二进制日志                  
log-bin-index = {{ MYSQL.SERVERS[i].LOGDIR }}/mysql-bin.index      
binlog_format = row
binlog-cache-size = 32M                                 # 设置二进制日志缓存大小
sync_binlog = 1                                         # 控制binlog的写入频率。每执行多少次事务写入一次(这个参数性能消耗很大，但可减小MySQL崩溃造成的损失) 
auto_increment_offset = 1                               # 这个参数一般用在主主同步中，用来错开自增值, 防止键值冲突
auto_increment_increment = 1                            # 这个参数一般用在主主同步中，用来错开自增值, 防止键值冲突
max_binlog_cache_size = 4G                           # 最大的二进制Cache日志缓冲尺寸
max_binlog_size = 4G                                    # 单个二进制日志文件的最大值，默认1G，最大1G
expire_logs_days = 7                                    # 二进制日志自动删除的天数，默认值为0,表示“没有自动删除”，启动时和二进制日志循环时可能删除      
log_bin_trust_function_creators = 1                     # 将函数复制到slave  


binlog-ignore-db = information_schema
binlog-ignore-db = performace_schema
binlog-ignore-db = sys

binlog_checksum = NONE                                   # MGR 模式必備  

############################ [mysqld] Bin log 相关 - 主从问题 ############################
## 主从 MASTER_HOST 等资讯 建议不要写在 /etc/my.cnf，因为主从 可能会动态切换 

#########################################################################################
{% if mysql_ha == 'master-slave' and groups[bra ~ '-mysql'].index(inventory_hostname) + 1 == 1 %}
log-slave-updates = 0                                   # master-slave SLAVE 不用 将 replication 来的 记入到从服务器自己的二进制日志文件中 

plugin_load = "rpl_semi_sync_master=semisync_master.so" # 一级 master 安装 semisync_master
loose_rpl_semi_sync_master_enabled = 1                  # 一级 master 使用 semisync_master
loose_rpl_semi_sync_master_timeout = 5000               # master 半同步 timeout 5000

{% elif mysql_ha == 'master-slave' and groups[bra ~ '-mysql'].index(inventory_hostname) + 1 == 2 %}
log-slave-updates = 0                                   # master-slave SLAVE 不用 将 replication 来的 记入到从服务器自己的二进制日志文件中 

plugin_load = "rpl_semi_sync_slave=semisync_slave.so"   # slave 安装 semisync_slave
loose_rpl_semi_sync_slave_enabled = 1                   # slave 使用 semisync_slave




{% elif mysql_ha == 'master-slave' and groups[bra ~ '-mysql'].index(inventory_hostname) + 1 >= 3 %}
log-slave-updates = 0                                   # master-slave SLAVE 不用 将 replication 来的 记入到从服务器自己的二进制日志文件中 

plugin_load = "rpl_semi_sync_slave=semisync_slave.so"   # slave 安装 semisync_slave
loose_rpl_semi_sync_slave_enabled = 1                   # slave 使用 semisync_slave

#########################################################################################

{% elif mysql_ha == 'master-master-slave' and groups[bra ~ '-mysql'].index(inventory_hostname) + 1 == 1 %}
log-slave-updates = 0

plugin_load = "rpl_semi_sync_master=semisync_master.so" # 一级 master 安装 semisync_master
loose_rpl_semi_sync_master_enabled = 1                  # 一级 master 使用 semisync_master
loose_rpl_semi_sync_master_timeout = 5000               # master 半同步 timeout 5000

{% elif mysql_ha == 'master-master-slave' and groups[bra ~ '-mysql'].index(inventory_hostname) + 1 == 2 %}
log-slave-updates = 1                                   # master-master-slave 次级 哈MASTER 需 将 replication 来的 记入到从服务器自己的二进制日志文件中 

plugin_load = "rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so" # 二级 master 安装 semisync_master, semisync_slave
loose_rpl_semi_sync_master_enabled = 1                  # 二级 master 使用 semisync_master
loose_rpl_semi_sync_slave_enabled = 1                   # 二级 master 使用 semisync_slave
loose_rpl_semi_sync_master_timeout = 5000               # 二级 master 半同步 timeout 5000

{% elif mysql_ha == 'master-master-slave' and groups[bra ~ '-mysql'].index(inventory_hostname) + 1 >= 3 %}
log-slave-updates = 0                                   

plugin_load = "rpl_semi_sync_slave=semisync_slave.so"   # slave 安装 semisync_slave
loose_rpl_semi_sync_slave_enabled = 1                   # slave 使用 semisync_slave

#########################################################################################

{% elif mysql_ha == 'dual-master' and groups[bra ~ '-mysql'].index(inventory_hostname) + 1 == 1 %}
log-slave-updates = 1

plugin_load = "rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so" # daul-master 同时担任 master 与 slave
loose_rpl_semi_sync_master_enabled = 1                  # daul-master 同时担任 master 与 slave
loose_rpl_semi_sync_slave_enabled = 1                   # dual-master 使用 semisync_slave
loose_rpl_semi_sync_master_timeout = 5000               # dual-master 半同步 timeout 5000

{% elif mysql_ha == 'dual-master' and groups[bra ~ '-mysql'].index(inventory_hostname) + 1 == 2 %}
log-slave-updates = 1   
                                 
plugin_load = "rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so" # daul-master 同时担任 master 与 slave
loose_rpl_semi_sync_master_enabled = 1                  # daul-master 同时担任 master 与 slave
loose_rpl_semi_sync_slave_enabled = 1                   # dual-master 使用 semisync_slave
loose_rpl_semi_sync_master_timeout = 5000               # dual-master 半同步 timeout 5000                                 

{% elif mysql_ha == 'dual-master' and groups[bra ~ '-mysql'].index(inventory_hostname) + 1 >= 3 %}
log-slave-updates = 0                                   

plugin_load = "rpl_semi_sync_slave=semisync_slave.so"   # slave 安装 semisync_slave
loose_rpl_semi_sync_slave_enabled = 1                   # slave 使用 semisync_slave

#########################################################################################

{% elif mysql_ha == 'mmm' and groups[bra ~ '-mysql'].index(inventory_hostname) + 1 == 1 %}
log-slave-updates = 1                                   # mmm MASTER1 将 replication 来的 记入到从服务器自己的二进制日志文件中

plugin_load = "rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so" # mmm 同时担任 master 与 slave
loose_rpl_semi_sync_master_enabled = 1                  # mmm 同时担任 master 与 slave
loose_rpl_semi_sync_slave_enabled = 1                   # mmm 使用 semisync_slave
loose_rpl_semi_sync_master_timeout = 5000               # mmm 半同步 timeout 5000  

{% elif mysql_ha == 'mmm' and groups[bra ~ '-mysql'].index(inventory_hostname) + 1 == 2 %}
log-slave-updates = 1                                   # mmm MASTER2 将 replication 来的 记入到从服务器自己的二进制日志文件

plugin_load = "rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so" # mmm 同时担任 master 与 slave
loose_rpl_semi_sync_master_enabled = 1                  # mmm 同时担任 master 与 slave
loose_rpl_semi_sync_slave_enabled = 1                   # mmm 使用 semisync_slave
loose_rpl_semi_sync_master_timeout = 5000               # mmm 半同步 timeout 5000  中

{% elif mysql_ha == 'mmm' and groups[bra ~ '-mysql'].index(inventory_hostname) + 1 >= 3 %}
log-slave-updates = 0                                   # mmm SLAVE 不用 将 replication 来的 记入到从服务器自己的二进制日志文件中 
plugin_load = "rpl_semi_sync_slave=semisync_slave.so"   # slave 安装 semisync_slave
loose_rpl_semi_sync_slave_enabled = 1                   # slave 使用 semisync_slave

#########################################################################################

{% elif mysql_ha == 'mha' and groups[bra ~ '-mysql'].index(inventory_hostname) + 1 == 1  and ( MYSQL.SERVERS[i].IS_MASTER == 1 or MYSQL.SERVERS[i].IS_MASTER == yes or MYSQL.SERVERS[i].IS_MASTER == True ) %}
log-slave-updates = 1                                   # mha , 可能切换一级 MASTER， 一级 MYSQL需 将 replication 来的 记入到从服务器自己的二进制日志文件中 

plugin_load = "rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so" # mha ，一级 MYSQL 可能切换担任 master 或 slave
loose_rpl_semi_sync_master_enabled = 1                  # mha ，一级 MYSQL 可能切换担任 master 或 slave
loose_rpl_semi_sync_slave_enabled = 1                   # mha 使用 semisync_slave
loose_rpl_semi_sync_master_timeout = 5000               # mha 半同步 timeout 5000  中

{% elif mysql_ha == 'mha' and groups[bra ~ '-mysql'].index(inventory_hostname) + 1 == 2  and ( MYSQL.SERVERS[i].IS_MASTER == 1 or MYSQL.SERVERS[i].IS_MASTER == yes or MYSQL.SERVERS[i].IS_MASTER == True ) %}
log-slave-updates = 1                                   # mha , 可能切换一级 MASTER，一级 MYSQL需 将 replication 来的 记入到从服务器自己的二进制日志文件中 

plugin_load = "rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so" # mha ，一级 MYSQL 可能切换担任 master 或 slave
loose_rpl_semi_sync_master_enabled = 1                  # mha ，一级 MYSQL 可能切换担任 master 或 slave
loose_rpl_semi_sync_slave_enabled = 1                   # mha 使用 semisync_slave
loose_rpl_semi_sync_master_timeout = 5000               # mha 半同步 timeout 5000  中

{% elif mysql_ha == 'mha' and groups[bra ~ '-mysql'].index(inventory_hostname) + 1 >= 3  and ( MYSQL.SERVERS[i].IS_MASTER == 1 or MYSQL.SERVERS[i].IS_MASTER == yes or MYSQL.SERVERS[i].IS_MASTER == True ) %}
log-slave-updates = 1                                   # mha , 可能切换一级 MASTER，一级 MYSQL需 将 replication 来的 记入到从服务器自己的二进制日志文件中 

plugin_load = "rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so" # mha ，一级 MYSQL 可能切换担任 master 或 slave
loose_rpl_semi_sync_master_enabled = 1                  # mha ，一级 MYSQL 可能切换担任 master 或 slave
loose_rpl_semi_sync_slave_enabled = 1                   # mha 使用 semisync_slave
loose_rpl_semi_sync_master_timeout = 5000               # mha 半同步 timeout 5000  中

{% elif mysql_ha == 'mha' %}
log-slave-updates = 0                                   # mha , 可能切换一级 MASTER，一级 MYSQL需 将 replication 来的 记入到从服务器自己的二进制日志文件中 

plugin_load = "rpl_semi_sync_slave=semisync_slave.so"   # slave 安装 semisync_slave
loose_rpl_semi_sync_slave_enabled = 1                   # slave 使用 semisync_slave

############################ [mysqld] MGR 相关 - 主从问题 ############################

{% elif mysql_ha == 'mgr' and ( mysql_version == '5.7' or mysql_version == '8.0' or mysql_version == '8.1') %}


log-slave-updates = ON                                   # 到从服务器自己的二进制日志文件中 
master_info_repository = TABLE
relay_log_info_repository = TABLE
transaction_write_set_extraction = XXHASH64
loose-group_replication_group_name = "2faa74b8-66bb-11e7-ab7e-b8ca3a6a61ec"
loose-group_replication_start_on_boot = off
loose-group_replication_local_address = "{{ MYSQL.SERVERS[i].LOOSE_GROUP_REPLICATION_LOCAL_ADDRESS }}"   
loose-group_replication_group_seeds = "{{ MYSQL.SERVERS[i].LOOSE_GROUP_REPLICATION_GROUPS_SEEDS }}"
loose-group_replication_bootstrap_group = off
report_host = {{ MYSQL.SERVERS[i].HOST }}
report_port = {{ MYSQL.SERVERS[i].PORT }}

slave_parallel_type=LOGICAL_CLOCK

slave_preserve_commit_order=on

{% else %}

############################ [mysqld]  - 主从问题 ############################

log-slave-updates = 0                                   # 将从服务器从主服务器收到的更新记入到从服务器自己的二进制日志文件中
      
plugin_load = "rpl_semi_sync_slave=semisync_slave.so"   # slave 安装 semisync_slave
loose_rpl_semi_sync_slave_enabled = 1                   # slave 使用 semisync_slave         
{% endif %}


{% if mysql_ha == 'master-master-slave' and groups[bra ~ '-mysql'].index(inventory_hostname) + 1 == 2 and MYSQL.SERVERS[i].ENGINE is undefined %}
default_storage_engine = BLACKHOLE                      # 二级 master 若使用 BACKHOLE engine , 在 二级 master 看不见资料的 !!
{% elif MYSQL.SERVERS[i].ENGINE is undefined %}
default_storage_engine = InnoDB                         # 二级 master 若使用 BACKHOLE engine , 在 二级 master 看不见资料的 !!
{% else %}
default_storage_engine = {{ MYSQL.SERVERS[i].ENGINE }}  # 二级 master 若使用 BACKHOLE engine , 在 二级 master 看不见资料的 !!
{% endif %}



